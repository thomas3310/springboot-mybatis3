buildscript {
	ext {
		springBootVersion = '1.5.10.RELEASE'
	}
	repositories {
		mavenCentral()
	}
	dependencies {
		classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
	}
}

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'org.springframework.boot'

group = 'com.test'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = 1.8
targetCompatibility = 1.8

repositories {
	mavenCentral()
}

configurations {
    mybatisGenerator
}

dependencies {
	compile('org.springframework.boot:spring-boot-starter-jdbc')
	compile('org.mybatis.spring.boot:mybatis-spring-boot-starter:1.3.1')
	compile('org.springframework.boot:spring-boot-starter-thymeleaf')
	compile('org.springframework.boot:spring-boot-starter-web')

	compile('com.alibaba:druid:1.0.11')
	compile('com.fasterxml.jackson.core:jackson-core')
	compile('com.fasterxml.jackson.core:jackson-databind')
	compile('com.fasterxml.jackson.datatype:jackson-datatype-joda')
	compile('com.fasterxml.jackson.module:jackson-module-parameter-names')
	compile('com.github.pagehelper:pagehelper-spring-boot-starter:1.1.2')
	compile('com.alibaba:druid-spring-boot-starter:1.1.0')

	runtime('mysql:mysql-connector-java')

	testCompile('org.springframework.boot:spring-boot-starter-test')
	
	mybatisGenerator 'org.mybatis.generator:mybatis-generator-core:1.3.2'
	mybatisGenerator 'mysql:mysql-connector-java'
}

def getProperties = {
    def properties = new Properties()
    file("src/main/resources/jdbc.properties").withInputStream { inputStream ->
        properties.load(inputStream)
    }
    file("src/main/resources/generator.properties").withInputStream { inputStream ->
        properties.load(inputStream)
    }
    properties
}

task mybatisGenerator {
    def properties = getProperties()
    ant.properties['jdbc.driver.class'] = properties.getProperty("jdbc.driver.class")
    ant.properties['jdbc.url'] = properties.getProperty("jdbc.url")
    ant.properties['jdbc.username'] = properties.getProperty("jdbc.username")
    ant.properties['jdbc.password'] = properties.getProperty("jdbc.password")
    ant.properties['project.model'] = properties.getProperty("project.model")
    ant.properties['project.mapper'] = properties.getProperty("project.mapper")
    ant.properties['project.xml'] = properties.getProperty("project.xml")
    ant.properties['package.model'] = properties.getProperty("package.model")
    ant.properties['package.mapper'] = properties.getProperty("package.mapper")
    ant.properties['package.xml'] = properties.getProperty("package.xml")
    ant.taskdef(
            name: 'mbgenerator',
            classname: 'org.mybatis.generator.ant.GeneratorAntTask',
            classpath: configurations.mybatisGenerator.asPath
    )
    ant.mbgenerator(overwrite: true,
            configfile: 'src/main/resources/generator.xml', verbose: true) {
        propertyset {
            propertyref(name: 'jdbc.driver.class')
            propertyref(name: 'jdbc.url')
            propertyref(name: 'jdbc.username')
            propertyref(name: 'jdbc.password')
            propertyref(name: 'project.model')
            propertyref(name: 'project.mapper')
            propertyref(name: 'project.xml')
            propertyref(name: 'package.model')
            propertyref(name: 'package.mapper')
            propertyref(name: 'package.xml')
        }
    }
}
